package com.sapient.flixme.service;

import java.util.List;

import com.sapient.flixme.dao.CustomerDao;
import com.sapient.flixme.dao.CustomerDaoHashMapImpl;
import com.sapient.flixme.dao.DaoException;
import com.sapient.flixme.dao.MovieDao;
import com.sapient.flixme.dao.MovieDaoHashMapImpl;
import com.sapient.flixme.dao.ReviewDao;
import com.sapient.flixme.dao.ReviewDaoHashMapImpl;
import com.sapient.flixme.entity.Customer;
import com.sapient.flixme.entity.Movie;
import com.sapient.flixme.entity.Review;
import com.sapient.flixme.util.KeyboardUtil;

import lombok.extern.slf4j.Slf4j;

@Slf4j
public class CustomerService {

	private CustomerDao dao = new CustomerDaoHashMapImpl();
	private MovieDao MovieDao = new MovieDaoHashMapImpl();
	private ReviewDao rdao = new ReviewDaoHashMapImpl();

	public Customer login(String email, String password) throws ServiceException {
		try {
			Customer c = dao.findByEmail(email);
			if (c == null) {
				throw new ServiceException("Invalid email/password");
			}
			if (c.getPassword().equals(password)) {
				return c;
			} else {
				throw new ServiceException("Invalid email/password");
			}

		} catch (DaoException e) {
			log.warn("Exception while calling login", e);
			throw new ServiceException(e);
		}
	}

	public void selfRegistration() throws ServiceException {
		// Integer id;
		Customer c = new Customer();
		String name = KeyboardUtil.getString("Enter full name: ");
		if (!(name.isEmpty())) {
			c.setName(name);
		}

		String email = KeyboardUtil.getString("Enter email: ");
		if (!(email.isEmpty())) {

		}
		c.setEmail(email);
		String password = KeyboardUtil.getPassword("Enter password: ");
		if (!(password.isEmpty())) {

		}
		c.setPassword(password);
		String street = KeyboardUtil.getString("Enter street: ");
		if (!(street.isEmpty())) {

		}
		c.setStreet(street);
		String city = KeyboardUtil.getString("Enter city: ");
		if (!(city.isEmpty())) {

		}
		c.setCity(city);
		String state = KeyboardUtil.getString("Enter state: ");
		if (!(state.isEmpty())) {

		}
		c.setState(state);
		String pincode = KeyboardUtil.getString("Enter pincode: ");
		if (!(pincode.isEmpty())) {

		}
		c.setPincode(pincode);
		String country = KeyboardUtil.getString("Enter country: ");
		if (!country.isEmpty()) {

		}
		c.setCountry(country);
		double balance = KeyboardUtil.getDouble("Enter balance: ");

		c.setBalance(balance);
		try {
			dao.addNewCustomer(c);
		} catch (DaoException e) {
			log.warn("Exception while creating customer", e);
			throw new ServiceException();
		}

	}

	public void myProfile(Customer customer) {
		// System.out.println("hi"+ customer);
		System.out.println("\n--------- PROFILE ---------\n");
		System.out.println("ID: \t" + customer.getId());
		System.out.println("Name: \t" + customer.getName());
		System.out.println("Balance: \t" + customer.getBalance());
		System.out.println("Email: \t" + customer.getEmail());
		System.out.println("Address: \t" + customer.getStreet().stripLeading() + " " + customer.getState() + " "
				+ customer.getCity()
				+ " " + customer.getPincode() + " " + customer.getCountry());

	}

	public void editProfile(Customer loggedInCustoner) throws ServiceException {

		myProfile(loggedInCustoner);
		int choice;
		while ((choice = editProfileMenu()) != 0) {
			switch (choice) {
				case 1:
					editName(loggedInCustoner);
					break;
				case 2:
					changePassword(loggedInCustoner);
					break;
				case 3:
					editEmail(loggedInCustoner);
					break;
				case 4:
					changeAddress(loggedInCustoner);
					System.out.println("not ready yet");
				default:
					System.out.println("Invalid choice. Please retry.");
			}

		}
	}

	public void changeAddress(Customer loggedInCustoner) throws ServiceException {
		String street = KeyboardUtil.getString("Enter your street");
		if (street.isEmpty()) {
			throw new ServiceException("Street cannot be empty ");
		} else {
			loggedInCustoner.setStreet(street);
		}

		String state = KeyboardUtil.getString("Enter your state");
		if (state.isEmpty()) {
			throw new ServiceException("State cannot be empty ");
		} else {
			loggedInCustoner.setState(state);
		}

		String city = KeyboardUtil.getString("Enter your city");
		if (city.isEmpty()) {
			throw new ServiceException("City cannot be empty ");
		} else {
			loggedInCustoner.setCity(city);
		}

		String pincode = KeyboardUtil.getString("Enter your pincode");
		if (pincode.isEmpty()) {
			throw new ServiceException("Pincode cannot be empty ");
		} else {
			loggedInCustoner.setPincode(pincode);
		}

		String country = KeyboardUtil.getString("Enter your country");
		if (country.isEmpty()) {
			throw new ServiceException("Country cannot be empty ");
		} else {
			loggedInCustoner.setCountry(country);
		}
		System.out.println("Address: " + loggedInCustoner.getStreet() + " " + loggedInCustoner.getState() + " "
				+ loggedInCustoner.getCity()
				+ " " + loggedInCustoner.getPincode() + " " + loggedInCustoner.getCountry());

	}

	static boolean isValid(String email) {
		String regex = "^[\\w-_\\.+]*[\\w-_\\.]\\@([\\w]+\\.)+[\\w]+[\\w]$";
		return email.matches(regex);
	}

	public void editEmail(Customer loggedInCustoner) {
		System.out.println("Cuurent email: " + loggedInCustoner.getEmail());
		String email = KeyboardUtil.getString("Enter new  email: ");
		boolean valid = isValid(email);
		if (valid) {
			loggedInCustoner.setEmail(email);
			System.out.println("Email Update!! \n New email:  " + loggedInCustoner.getEmail());
		} else {
			System.out.println("Enter a valid email ");
		}

	}

	public void changePassword(Customer loggedInCustoner) {

		String oldPassword = KeyboardUtil.getString("Enter old password: ");
		if (oldPassword.equals(loggedInCustoner.getPassword())) {
			String newPassword = KeyboardUtil.getString("Enter new password");
			String newPassword2 = KeyboardUtil.getString("Confirm new password ");
			if (newPassword.equals(newPassword2)) {
				loggedInCustoner.setPassword(newPassword);
				System.out.println("Password changed successfully");
			} else {
				System.out.println("Password does not match");
			}
		} else {
			System.out.println("Wrong password !! Enter right password to reset ");
		}
	}

	public void editName(Customer loggedInCustoner) {
		String newName = KeyboardUtil.getString("\nEnter your name: ");
		System.out.println("Are you sure you want want to change your name from "
				+ loggedInCustoner.getName() + " to " + newName);
		int ans = KeyboardUtil.getInt("Press 1 to save and any other key  to exit ");
		try {

			switch (ans) {
				case 1:
					loggedInCustoner.setName(newName);
					System.out.println("Hello " + loggedInCustoner.getName());
					break;
				default:
					System.out.println("Invalid choice !c");
			}

		} catch (Exception e) {
			System.out.println(e.getMessage());
		}
	}

	public int editProfileMenu() {
		try {
			System.out.println("\n--------- Menu --------- ");
			System.out.println("\n1. Edit name");
			System.out.println("2. Change password");
			System.out.println("3. Edit email");
			System.out.println("4. Change address");
			System.out.println("0. Exit");

			int choice = KeyboardUtil.getInt("\nEnter your choice: ");
			return choice;
		} catch (Exception e) {
			log.warn("There was an error while accepting choice for main menu", e);
			return -1;
		}
	}

	public void viewBalance(Customer loggedInCustoner) {
		System.out.println("\nYour current balance: \t" + loggedInCustoner.getBalance());
	}

	public void updateBalance(Customer loggedInCustoner) throws ServiceException {
		System.out.println("\nYour current balance: \t" + loggedInCustoner.getBalance()+"\n");

		Double balance = KeyboardUtil.getDouble("Enter amount: ");

		if (balance == 0) {
			System.out.println("Enter a valid amount  ");
		} else {
			loggedInCustoner.setBalance(loggedInCustoner.getBalance() + balance);
			System.out.println("Current balance: " + loggedInCustoner.getBalance());
		}

	}

	public void enterReview(Customer loggedInCustomer) throws DaoException {

		String name = KeyboardUtil.getString("Enter the movie name you want to review");
		Movie movie = MovieDao.findByTitile(name);
		System.out.println(movie);
		Float rating = KeyboardUtil.getFloat("Enter rating (0-5)");
		String review = KeyboardUtil.getString("Enter your review");
		
		Review r = new Review();
		r.setCustomerName(loggedInCustomer.getName());
		r.setEmail(loggedInCustomer.getEmail());
		r.setCustomerId(loggedInCustomer.getId());
		r.setRating(rating);
		r.setReview(review);
		rdao.addNewReview(r, loggedInCustomer.getId());
		MovieDao.addReview(movie, r, movie.getId());
		// List<Review> r1 = rdao.findById(loggedInCustomer.getId());

		// movie.setReview(r1);
		// rdao.updateReview(r);
		// MovieDao.updateMovie(movie);

		// System.out.println(movie);

	}

	public void viewReview(Customer loggedInCustoner) throws DaoException {
		List<Review> r =rdao.findById(loggedInCustoner.getId());
		System.out.println(r);
	}

}
